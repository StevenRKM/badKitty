// Generated by CoffeeScript 1.10.0
'use strict';
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['input', 'element', 'physics', 'random', 'sound'], function(input, element, physics, random, sound) {
  var AVATAR, Avatar, BadPussyCat, BigExplosion, Bullet, CONTEXT, Element, Explosion, FireSystem, Node, SCENE, Spawn, UI, UIElement, UILayer, UISlider, canvas, context, height, now, resize, time, update, width;
  Node = element.Node;
  Element = element.Element;
  console.log("da kitty has started");
  sound.opening.play();
  Array.prototype.remove = function(element) {
    var index;
    index = this.indexOf(element);
    if (index !== -1) {
      return this.splice(index, 1);
    }
  };
  canvas = document.createElement('canvas');
  context = canvas.getContext('2d');
  CONTEXT = canvas.getContext('2d');
  width = function() {
    return window.innerWidth;
  };
  height = function() {
    return window.innerHeight;
  };
  time = function() {
    return (new Date()).getTime();
  };
  now = time();
  canvas.width = width();
  canvas.height = height();
  document.body.appendChild(canvas);
  resize = function() {
    canvas.width = width();
    return canvas.height = height();
  };
  window.addEventListener('resize', resize, false);
  update = function() {
    var _now, difference;
    _now = time();
    difference = _now - now;
    if (difference) {
      context.clearRect(0, 0, canvas.width, canvas.height);
      SCENE._update(CONTEXT, difference / 1000.0, _now);
      now = _now;
    }
    return window.requestAnimationFrame(update);
  };
  Avatar = (function(superClass) {
    extend(Avatar, superClass);

    Avatar.width = 100;

    Avatar.height = 100;

    Avatar.speed = 500;

    Avatar.reload = 500;

    function Avatar() {
      Avatar.__super__.constructor.call(this, 100, 100, Avatar.width, Avatar.height);
      this.ready = false;
      this.image = new Image();
      this.image.onload = function() {
        return console.log("IMAGE LOADED");
      };
      this.image.src = "http://placekitten.com/g/" + this.width + "/" + this.height;
      this.speed = Avatar.speed;
      this.reload = Avatar.reload;
      this.last_shot = 0;
    }

    Avatar.prototype.update = function(ctx, t) {
      var reloading, speed, x, y;
      x = this.x;
      y = this.y;
      speed = this.speed * t;
      if (input.state.UP) {
        y -= speed;
      }
      if (input.state.DOWN) {
        y += speed;
      }
      if (input.state.LEFT) {
        x -= speed;
      }
      if (input.state.RIGHT) {
        x += speed;
      }
      if (input.state.SHOOT && this.last_shot + this.reload < time()) {
        this.shoot();
      }
      this.x = x;
      this.y = y;
      if (!this.ready) {
        this.checkImage();
      }
      if (this.ready) {
        ctx.drawImage(this.image, 0, 0);
      }
      reloading = time() - this.last_shot;
      if (reloading <= 0) {
        reloading = 0;
      } else if (reloading >= this.reload) {
        reloading = 1;
      } else {
        reloading /= this.reload;
      }
      ctx.fillStyle = "#75331F";
      return ctx.fillRect(0, this.height - 10, this.width * (1 - reloading), 10);
    };

    Avatar.prototype.checkImage = function() {
      if (!this.image.complete) {
        return;
      }
      if (typeof this.image.naturalWidth !== "undefined" && this.image.naturalWidth === 0) {
        return;
      }
      return this.ready = true;
    };

    Avatar.prototype.shoot = function() {
      this.last_shot = time();
      return this.parent.addNode(new Bullet(this.x + this.width, this.y + this.height / 2));
    };

    return Avatar;

  })(Element);
  Bullet = (function(superClass) {
    extend(Bullet, superClass);

    Bullet.width = 20;

    Bullet.height = 5;

    Bullet.speed = 1000;

    function Bullet(x, y) {
      Bullet.__super__.constructor.call(this, x, y, Bullet.width, Bullet.height);
      sound.laser.play();
      this.ready = false;
      this.image = new Image();
      this.image.onload = function() {
        return console.log("IMAGE LOADED BULLET");
      };
      this.image.src = "http://placekitten.com/g/" + this.width + "/" + this.height;
      this.speed = Bullet.speed;
    }

    Bullet.prototype.checkImage = function() {
      if (!this.image.complete) {
        return;
      }
      if (typeof this.image.naturalWidth !== "undefined" && this.image.naturalWidth === 0) {
        return;
      }
      return this.ready = true;
    };

    Bullet.prototype.update = function(ctx, t) {
      if (!this.ready) {
        this.checkImage();
      }
      this.x += this.speed * t;
      if (!this.ready) {
        this.checkImage();
      }
      if (this.ready) {
        return ctx.drawImage(this.image, 0, 0);
      }
    };

    return Bullet;

  })(Element);
  Spawn = (function(superClass) {
    extend(Spawn, superClass);

    function Spawn() {
      Spawn.__super__.constructor.call(this);
      this.next = time() + random.int(2000, 1000);
    }

    Spawn.prototype.update = function() {
      if (this.next < time()) {
        this.parent.addNode(new BadPussyCat(width(), random.int(50, height() - 50)));
        return this.next = time() + random.int(1000, 500);
      }
    };

    return Spawn;

  })(Node);
  BadPussyCat = (function(superClass) {
    extend(BadPussyCat, superClass);

    BadPussyCat.width = 50;

    BadPussyCat.height = 50;

    BadPussyCat.speed = 300;

    function BadPussyCat(x, y) {
      BadPussyCat.__super__.constructor.call(this, x, y, BadPussyCat.width, BadPussyCat.height);
      this.ready = false;
      this.image = new Image();
      this.image.onload = function() {
        return console.log("IMAGE LOADED BADPUSSYCAT");
      };
      this.image.src = "http://placekitten.com/g/" + this.width + "/" + this.height;
      this.speed = BadPussyCat.speed + random.int(300);
      console.warn(this.speed);
    }

    BadPussyCat.prototype.checkImage = function() {
      if (!this.image.complete) {
        return;
      }
      if (typeof this.image.naturalWidth !== "undefined" && this.image.naturalWidth === 0) {
        return;
      }
      return this.ready = true;
    };

    BadPussyCat.prototype.update = function(ctx, t) {
      var j, len, node, ref;
      if (!this.ready) {
        this.checkImage();
      }
      this.x -= this.speed * t;
      if (!this.ready) {
        this.checkImage();
      }
      if (this.ready) {
        ctx.drawImage(this.image, 0, 0);
      }
      ref = this.parent.children;
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        if (node instanceof Bullet && physics.collide(node, this)) {
          UI.score++;
          sound.heavyHit.play();
          this.parent.addNode(new Explosion(this.x + this.width / 2, this.y + this.height / 2));
          this.remove();
          node.remove();
          return;
        }
        if (node instanceof Avatar && physics.collide(node, this)) {
          sound.explosion.play();
          this.parent.addNode(new Explosion(this.x + this.width / 2, this.y + this.height / 2));
          this.parent.addNode(new BigExplosion(node.x + node.width / 2, node.y + node.height / 2, input.state.UP, input.state.DOWN, input.state.LEFT, input.state.RIGHT));
          this.remove();
          node.remove();
          return;
        }
      }
      if (this.x < -this.width) {
        this.remove();
        return UI.escaped++;
      }
    };

    return BadPussyCat;

  })(Element);
  UI = (function(superClass) {
    extend(UI, superClass);

    function UI() {
      UI.__super__.constructor.call(this);
      this.score = 0;
      this.escaped = 0;
    }

    UI.prototype.update = function(ctx, t) {
      ctx.font = "48px serif";
      ctx.fillText("Bad Kitties killed: " + this.score, 50, 50);
      return ctx.fillText("Bad Kitties escaped: " + this.escaped, 50, 100);
    };

    return UI;

  })(Node);
  Explosion = (function(superClass) {
    var removeAfter;

    extend(Explosion, superClass);

    Explosion.speed = 300;

    function Explosion(x, y) {
      Explosion.__super__.constructor.call(this, x, y);
      removeAfter(this);
    }

    removeAfter = function(el) {
      return setTimeout(function() {
        console.warn("REMOVE PARTICLES");
        return el.remove();
      }, 300);
    };

    Explosion.prototype.update = function(ctx, t) {
      var i, j, point, range, ref, results, size, sized;
      this.x -= Explosion.speed * t;
      this.y += Explosion.speed * t / 4;
      size = 25;
      range = 30;
      results = [];
      for (i = j = 0, ref = random.int(20, 10); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        ctx.fillStyle = "hsl(" + random.int(33) + ", 100%, 50%)";
        sized = random.int(size, 5);
        point = random.inCircle(range);
        results.push(ctx.fillRect(point.x, point.y, sized, sized));
      }
      return results;
    };

    return Explosion;

  })(Element);
  BigExplosion = (function(superClass) {
    var removeAfter;

    extend(BigExplosion, superClass);

    BigExplosion.speed = 500;

    function BigExplosion(x, y, up, down, left, right) {
      this.up = up;
      this.down = down;
      this.left = left;
      this.right = right;
      BigExplosion.__super__.constructor.call(this, x, y);
      removeAfter(this);
    }

    removeAfter = function(el) {
      return setTimeout(function() {
        console.warn("REMOVE PARTICLES");
        return el.remove();
      }, 300);
    };

    BigExplosion.prototype.update = function(ctx, t) {
      var i, j, point, range, ref, results, size, sized;
      if (this.up && !this.down) {
        this.y -= BigExplosion.speed * t;
      } else if (this.down && !this.up) {
        this.y += BigExplosion.speed * t;
      }
      if (this.left && !this.right) {
        this.x -= BigExplosion.speed * t;
      } else if (this.right && !this.left) {
        this.x += BigExplosion.speed * t;
      }
      size = 50;
      range = 100;
      results = [];
      for (i = j = 0, ref = random.int(100, 20); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        ctx.fillStyle = "hsl(" + random.int(45) + ", 100%, 50%)";
        sized = random.int(size, 5);
        point = random.inCircle(range);
        results.push(ctx.fillRect(point.x, point.y, sized, sized));
      }
      return results;
    };

    return BigExplosion;

  })(Element);
  UILayer = (function(superClass) {
    extend(UILayer, superClass);

    function UILayer(min, max, value) {
      UILayer.__super__.constructor.call(this);
      this.nextHeight = 0;
      this.elements = {};
    }

    UILayer.prototype.addUIElemenet = function(element) {
      element.y = this.nextHeight;
      this.nextHeight += element.height;
      this.elements[element.name] = element;
      return this.addNode(element);
    };

    UILayer.prototype.getValue = function(name) {
      return this.elements[name].value;
    };

    UILayer.prototype.mouseDown = function(event) {
      var j, len, node, ref, results;
      ref = this.children;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        results.push(node.mouseDown(event));
      }
      return results;
    };

    UILayer.prototype.update = function(ctx, t) {};

    return UILayer;

  })(Element);
  UIElement = (function(superClass) {
    extend(UIElement, superClass);

    function UIElement(name1, value1) {
      this.name = name1;
      this.value = value1 != null ? value1 : 0;
      UIElement.__super__.constructor.call(this);
    }

    UIElement.prototype.mouseDown = function(event) {};

    return UIElement;

  })(Element);
  UISlider = (function(superClass) {
    extend(UISlider, superClass);

    function UISlider(name1, min1, max1, value1) {
      this.name = name1;
      this.min = min1;
      this.max = max1;
      this.value = value1;
      UISlider.__super__.constructor.call(this, this.name, this.value);
      this.height = 50;
      this.width = 350;
    }

    UISlider.prototype.update = function(ctx, t) {
      var relX, valueWidth;
      ctx.fillStyle = "hsl(200, 10%, 20%)";
      ctx.fillRect(0, 0, this.width, this.height);
      relX = this.value - this.min;
      valueWidth = relX ? relX / (this.max - this.min) * this.width : 0;
      ctx.fillStyle = "hsl(200, 100%, 30%)";
      ctx.fillRect(0, 0, valueWidth, this.height);
      ctx.fillStyle = "hsl(200, 100%, 80%)";
      ctx.font = "24px serif";
      ctx.fillText(this.min, 0, this.height / 2 - 5);
      ctx.fillText(this.max, 0, this.height - 5);
      ctx.fillText(this.name, this.width - 150, this.height / 2 - 5);
      ctx.font = "60px serif";
      return ctx.fillText(Math.round(this.value), 60, this.height - 5);
    };

    UISlider.prototype.mouseDown = function(event) {
      var relX;
      if (physics.pointInsideRect({
        x: event.offsetX,
        y: event.offsetY
      }, this)) {
        relX = (event.offsetX - this.x) / this.width;
        return this.value = ((this.max - this.min) * relX) + this.min;
      }
    };

    return UISlider;

  })(UIElement);
  FireSystem = (function(superClass) {
    extend(FireSystem, superClass);

    function FireSystem(x, y, source) {
      var i, j, ref;
      this.source = source;
      FireSystem.__super__.constructor.call(this, x, y);
      this.max = 1000;
      this.particles = [];
      this.creationSpeed = 1;
      for (i = j = 0, ref = this.max; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        this.particles.push({
          alive: false,
          start: 0,
          end: 0,
          x: 0,
          y: 0,
          speed: 0,
          h: 0,
          s: 0,
          l: 0,
          a: 0
        });
      }
    }

    FireSystem.prototype.update = function(ctx, t, now) {
      var creationChance, endBase, endRandom, hue, hueSpread, j, len, p, particleSize, point, ref, speedBase, speedRandom, spreadY, total;
      total = 0;
      particleSize = UI.getValue("particleSize");
      speedBase = UI.getValue("speedBase");
      speedRandom = UI.getValue("speedRandom");
      endBase = UI.getValue("endBase");
      endRandom = UI.getValue("endRandom");
      hue = UI.getValue("hue");
      hueSpread = UI.getValue("hueSpread");
      creationChance = UI.getValue("creationChance");
      spreadY = UI.getValue("spreadY");
      ref = this.particles;
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (p.alive) {
          total++;
          ctx.fillStyle = "hsla(" + p.h + ", " + (p.s * 100) + "%, " + (p.l * 100) + "%, " + p.a + ")";
          ctx.fillRect(p.x, p.y, particleSize, particleSize);
          p.x -= p.speed * t;
          if (p.end < now) {
            p.alive = false;
          }
        } else {
          if (random.chance(creationChance)) {
            point = random.inCircle((this.source.height - particleSize) / 2);
            p.alive = true;
            p.start = now;
            p.end = now + endBase + random.rand() * endRandom;
            p.x = this.source.x;
            p.y = this.source.y + this.source.height / 2 + point.y;
            p.speed = speedBase + random.int(speedRandom);
            p.h = (hue + random.int(hueSpread)) % 360;
            p.s = 1;
            p.l = 0.8;
            p.a = 0.5;
          }
        }
      }
      ctx.fillStyle = "hsla(0, 100%, 80%, 0.5)";
      ctx.font = "48px serif";
      return ctx.fillText("Particles: " + total, 50, 50);
    };

    return FireSystem;

  })(Element);
  SCENE = new Node();
  AVATAR = new Avatar();
  UI = new UI();
  SCENE.addNode(UI);
  UI = new UILayer();
  SCENE.addNode(UI);
  SCENE.addNode(new FireSystem(0, 0, AVATAR));
  SCENE.addNode(AVATAR);
  SCENE.addNode(new Spawn());
  UI.addUIElemenet(new UISlider("particleSize", 1, 100, 15));
  UI.addUIElemenet(new UISlider("speedBase", 0, 100, 100));
  UI.addUIElemenet(new UISlider("speedRandom", 0, 200, 200));
  UI.addUIElemenet(new UISlider("endBase", 0, 5000, 1000));
  UI.addUIElemenet(new UISlider("endRandom", 0, 5000, 500));
  UI.addUIElemenet(new UISlider("hue", 0, 360, 0));
  UI.addUIElemenet(new UISlider("hueSpread", 0, 360, 46));
  UI.addUIElemenet(new UISlider("creationChance", 0, 100, 5));
  UI.addUIElemenet(new UISlider("spreadY", 0, 750, 30));
  canvas.addEventListener('mousedown', (function(event) {
    return UI.mouseDown(event);
  }), false);
  update();
  return {
    width: width,
    height: height,
    canvas: canvas,
    context: context
  };
});

//# sourceMappingURL=kitty.js.map
