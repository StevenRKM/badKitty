// Generated by CoffeeScript 1.10.0
var AVATAR, Avatar, BK_SHOOT, BadPussyCat, Bullet, Element, HEIGHT, KB_DOWN, KB_LEFT, KB_RIGHT, KB_UP, PowerUp, SCENE, Scene, Spawn, SpeedUp, TIME, WIDTH, _loop, chance, collide, inside, pick, rand,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Array.prototype.remove = function(element) {
  var index;
  index = this.indexOf(element);
  if (index !== -1) {
    return this.splice(index, 1);
  }
};

Scene = (function() {
  function Scene() {
    this.elements = [];
    this._add = [];
    this._remove = [];
  }

  Scene.prototype.update = function() {
    var element, j, k, l, len, len1, len2, ref, ref1, ref2, results;
    ref = this._add;
    for (j = 0, len = ref.length; j < len; j++) {
      element = ref[j];
      console.log("ADD", element._id, element.constructor.name);
      element._scene = this;
      element.show();
      this.elements.push(element);
    }
    ref1 = this._remove;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      element = ref1[k];
      console.log("REMOVE", element._id, element.constructor.name);
      element._scene = void 0;
      element.hide();
      this.elements.remove(element);
    }
    this._add = [];
    this._remove = [];
    ref2 = this.elements;
    results = [];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      element = ref2[l];
      results.push(element.update());
    }
    return results;
  };

  Scene.prototype.addElement = function(element) {
    return this._add.push(element);
  };

  Scene.prototype.removeElement = function(element) {
    return this._remove.push(element);
  };

  return Scene;

})();

Element = (function() {
  Element.auto_id = 0;

  function Element(x, y, width, height) {
    if (x == null) {
      x = void 0;
    }
    if (y == null) {
      y = void 0;
    }
    if (width == null) {
      width = void 0;
    }
    if (height == null) {
      height = void 0;
    }
    this._id = ++Element.auto_id;
    this._scene = void 0;
    this.element = document.createElement("div");
    this.hide();
    this.element.style.position = "absolute";
    this.element.style.backgroundColor = "black";
    document.body.appendChild(this.element);
    this.keepInScreen = true;
    this.removeOnEdge = false;
    this.setPosition(x || 0, y || 0);
    this.setDimension(width || 0, height || 0);
  }

  Element.prototype.setPosition = function(x, y) {
    this.x = x;
    this.y = y;
    if (this.keepInScreen) {
      if (this.x < 0) {
        this.x = 0;
      }
      if (this.x + this.width > WIDTH()) {
        this.x = WIDTH() - this.width;
      }
      if (this.y < 0) {
        this.y = 0;
      }
      if (this.y + this.height > HEIGHT()) {
        this.y = HEIGHT() - this.height;
      }
    }
    if (this.removeOnEdge) {
      if (this.x + this.width < 0 || this.x > WIDTH() || this.y + this.height < 0 || this.y > HEIGHT()) {
        this["delete"]();
      }
    }
    return this._position();
  };

  Element.prototype.setDimension = function(width, height) {
    this.width = width;
    this.height = height;
    return this._dimension();
  };

  Element.prototype.show = function() {
    return this.element.style.display = "block";
  };

  Element.prototype.hide = function() {
    return this.element.style.display = "none";
  };

  Element.prototype._position = function() {
    this.element.style.left = this.x + "px";
    return this.element.style.top = this.y + "px";
  };

  Element.prototype._dimension = function() {
    this.element.style.width = this.width + "px";
    return this.element.style.height = this.height + "px";
  };

  Element.prototype["delete"] = function() {
    return this._scene.removeElement(this);
  };

  Element.prototype.update = function() {
    return console.warn("Not implemented");
  };

  return Element;

})();

Avatar = (function(superClass) {
  extend(Avatar, superClass);

  Avatar.width = 100;

  Avatar.height = 100;

  Avatar.speed = 2;

  Avatar.reload = 100;

  function Avatar() {
    Avatar.__super__.constructor.call(this, 100, 100, Avatar.width, Avatar.height);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.speed = Avatar.speed;
    this.reload = Avatar.reload;
    this.last_shot = 0;
  }

  Avatar.prototype.update = function() {
    var x, y;
    x = this.x;
    y = this.y;
    if (KB_UP) {
      y -= this.speed;
    }
    if (KB_DOWN) {
      y += this.speed;
    }
    if (KB_LEFT) {
      x -= this.speed;
    }
    if (KB_RIGHT) {
      x += this.speed;
    }
    if (BK_SHOOT && this.last_shot + this.reload < TIME()) {
      this.shoot();
    }
    return this.setPosition(x, y);
  };

  Avatar.prototype.shoot = function() {
    this.last_shot = TIME();
    return this._scene.addElement(new Bullet(this.x + this.width, this.y + this.height / 2));
  };

  return Avatar;

})(Element);

Bullet = (function(superClass) {
  extend(Bullet, superClass);

  Bullet.width = 20;

  Bullet.height = 5;

  Bullet.speed = 5;

  function Bullet(x, y) {
    Bullet.__super__.constructor.call(this, x, y, Bullet.width, Bullet.height);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.keepInScreen = false;
    this.removeOnEdge = true;
  }

  Bullet.prototype.update = function() {
    return this.setPosition(this.x + Bullet.speed, this.y);
  };

  return Bullet;

})(Element);

PowerUp = (function(superClass) {
  extend(PowerUp, superClass);

  PowerUp.width = 50;

  PowerUp.height = 50;

  PowerUp.speed = 1;

  function PowerUp(x, y) {
    PowerUp.__super__.constructor.call(this, x, y, PowerUp.width, PowerUp.height);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.element.style.backgroundColor = "#4FCC2F";
    this.element.style.backgroundBlendMode = "screen";
    this.keepInScreen = false;
    this.removeOnEdge = true;
  }

  PowerUp.prototype.update = function() {
    this.setPosition(this.x - PowerUp.speed, this.y);
    if (collide(this.element, AVATAR.element)) {
      AVATAR.speed += 5;
      return this["delete"]();
    }
  };

  return PowerUp;

})(Element);

SpeedUp = (function(superClass) {
  extend(SpeedUp, superClass);

  SpeedUp.width = 50;

  SpeedUp.height = 50;

  SpeedUp.speed = 1;

  function SpeedUp(x, y) {
    SpeedUp.__super__.constructor.call(this, x, y, PowerUp.width, PowerUp.height);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.element.style.backgroundColor = "#4C78F5";
    this.element.style.backgroundBlendMode = "screen";
    this.keepInScreen = false;
    this.removeOnEdge = true;
  }

  SpeedUp.prototype.update = function() {
    this.setPosition(this.x - SpeedUp.speed, this.y);
    if (collide(this.element, AVATAR.element)) {
      AVATAR.speed += 5;
      return this["delete"]();
    }
  };

  return SpeedUp;

})(Element);

Spawn = (function(superClass) {
  extend(Spawn, superClass);

  function Spawn(x, y) {
    Spawn.__super__.constructor.call(this);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.keepInScreen = false;
    this.removeOnEdge = false;
    this.next = TIME() + rand(3000, 1000);
  }

  Spawn.prototype.update = function() {
    if (this.next < TIME()) {
      this._scene.addElement(new BadPussyCat(WIDTH(), rand(50, HEIGHT() - 50)));
      return this.next = TIME() + rand(2000, 1000);
    }
  };

  return Spawn;

})(Element);

BadPussyCat = (function(superClass) {
  extend(BadPussyCat, superClass);

  BadPussyCat.width = 75;

  BadPussyCat.height = 75;

  BadPussyCat.speed = 3;

  function BadPussyCat(x, y) {
    BadPussyCat.__super__.constructor.call(this, x, y, BadPussyCat.width, BadPussyCat.height);
    this.element.style.backgroundImage = "url('http://placekitten.com/g/" + this.width + "/" + this.height + "')";
    this.element.style.backgroundColor = "#F54C4C";
    this.element.style.backgroundBlendMode = "screen";
    this.keepInScreen = false;
    this.removeOnEdge = true;
  }

  BadPussyCat.prototype.update = function() {
    var i, j, len, ref;
    this.setPosition(this.x - BadPussyCat.speed, this.y);
    ref = this._scene.elements;
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i instanceof Bullet && collide(i.element, this.element)) {
        if (chance(20)) {
          this._scene.addElement(new PowerUp(this.x, this.y));
        }
        this["delete"]();
        i["delete"]();
      }
    }
    if (collide(this.element, AVATAR.element)) {
      return SCENE.update = function() {};
    }
  };

  return BadPussyCat;

})(Element);

"FUNCTIONS";

TIME = function() {
  return (new Date()).getTime();
};

WIDTH = function() {
  return window.innerWidth;
};

HEIGHT = function() {
  return window.innerHeight;
};

rand = function(max, min) {
  if (max == null) {
    max = 1;
  }
  if (min == null) {
    min = 0;
  }
  return Math.floor(min + Math.random() * (max + 1 - min));
};

chance = function(percentage) {
  return Math.random() * 100 < percentage;
};

pick = function(list) {
  return list[randint(list.length - 1)];
};

collide = function(el1, el2) {
  var rect1, rect2;
  rect1 = el1.getBoundingClientRect();
  rect2 = el2.getBoundingClientRect();
  return !(rect1.top > rect2.bottom || rect1.right < rect2.left || rect1.bottom < rect2.top || rect1.left > rect2.right);
};

inside = function(el1, el2) {
  var rect1, rect2;
  rect1 = el1.getBoundingClientRect();
  rect2 = el2.getBoundingClientRect();
  return ((rect2.top <= rect1.top) && (rect1.top <= rect2.bottom)) && ((rect2.top <= rect1.bottom) && (rect1.bottom <= rect2.bottom)) && ((rect2.left <= rect1.left) && (rect1.left <= rect2.right)) && ((rect2.left <= rect1.right) && (rect1.right <= rect2.right));
};

"CONTROLS";

KB_LEFT = false;

KB_RIGHT = false;

KB_UP = false;

KB_DOWN = false;

BK_SHOOT = false;

document.addEventListener('keydown', function(event) {
  var char;
  char = (String.fromCharCode(event.keyCode)).toLowerCase();
  if (char === "w") {
    return KB_UP = true;
  } else if (char === "s") {
    return KB_DOWN = true;
  } else if (char === "a") {
    return KB_LEFT = true;
  } else if (char === "d") {
    return KB_RIGHT = true;
  } else if (char === " ") {
    return BK_SHOOT = true;
  }
});

document.addEventListener('keyup', function(event) {
  var char;
  char = (String.fromCharCode(event.keyCode)).toLowerCase();
  if (char === "w") {
    return KB_UP = false;
  } else if (char === "s") {
    return KB_DOWN = false;
  } else if (char === "a") {
    return KB_LEFT = false;
  } else if (char === "d") {
    return KB_RIGHT = false;
  } else if (char === " ") {
    return BK_SHOOT = false;
  }
});

"INIT SCENE";

SCENE = new Scene();

AVATAR = new Avatar();

SCENE.addElement(AVATAR);

SCENE.addElement(new Spawn());

_loop = function() {
  if (SCENE) {
    return SCENE.update();
  }
};

setInterval(_loop, 20);
